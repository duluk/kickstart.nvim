return {
  'williamboman/mason.nvim',
  dependencies = {
    'williamboman/mason-lspconfig.nvim',
    'WhoIsSethDaniel/mason-tool-installer.nvim',
  },
  config = function()
    -- import mason
    local mason = require 'mason'

    -- -- import mason-lspconfig
    -- local mason_lspconfig = require("mason-lspconfig")
    --
    -- local mason_tool_installer = require("mason-tool-installer")

    -- enable mason and configure icons
    mason.setup {
      ui = {
        icons = {
          package_installed = '✓',
          package_pending = '➜',
          package_uninstalled = '✗',
        },
      },
    }

    -- LSP servers and clients are able to communicate to each other what features they support.
    --  By default, Neovim doesn't support everything that is in the LSP specification.
    --  When you add nvim-cmp, luasnip, etc. Neovim now has *more* capabilities.
    --  So, we create new capabilities with nvim cmp, and then broadcast that to the servers.
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities = vim.tbl_deep_extend('force', capabilities, require('cmp_nvim_lsp').default_capabilities())

    -- Enable the following language servers
    --  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
    --
    --  Add any additional override configuration in the following tables. Available keys are:
    --  - cmd (table): Override the default command used to start the server
    --  - filetypes (table): Override the default list of associated filetypes for the server
    --  - capabilities (table): Override fields in capabilities. Can be used to disable certain LSP features.
    --  - settings (table): Override the default settings passed when initializing the server.
    --        For example, to see the options for `lua_ls`, you could go to: https://luals.github.io/wiki/settings/
    local servers = {
      clangd = {
        keys = {
          { '<leader>ch', '<cmd>ClangdSwitchSourceHeader<CR>', desc = 'Switch Source/Header (C/C++)' },
        },
        root_dir = function(fname)
          return require('lspconfig.util').root_pattern(
            'Makefile',
            'configure.ac',
            'configure.in',
            'config.h.in',
            'meson.build',
            'meson_options.txt',
            'build.ninja'
          )(fname) or require('lspconfig.util').root_pattern('compile_commands.json', 'compile_flags.txt')(fname) or require('lspconfig.util').find_git_ancestor(
            fname
          )
        end,
        capabilities = {
          -- So it plays well with GitHub Copilot
          offsetEncoding = { 'utf-16' },
        },
        cmd = {
          'clangd',
          '--background-index',
          '--clang-tidy',
          '--header-insertion=iwyu',
          '--completion-style=detailed',
          '--function-arg-placeholders',
          '--fallback-style=llvm',
        },
        init_options = {
          usePlaceholders = true,
          completeUnimported = true,
          clangdFileStatus = true,
        },
      },
      ast_grep = {}, -- Used to search for symbols
      awk_language_server = {}, -- LSP for AWK
      beautysh = {}, -- Used to format shell scripts
      clang_format = {}, -- Used to format C/C++ code
      cmake_language_server = {}, -- LSP for CMake
      cmakelang = {}, -- Used to lint CMake
      cmakelint = {}, -- Used to lint CMake
      cpplint = {}, -- Used to lint C/C++ code
      css_lsp = {}, -- LSP for CSS
      -- erb_lint = {}, -- Used to lint Ruby ERB files
      erblint = {}, -- Used to lint Ruby ERB files
      eslint = {}, -- Used to lint JavaScript, TypeScript, etc.
      eslint_d = {}, -- Used to lint JavaScript, TypeScript, etc.
      flake8 = {}, -- Used to lint Python
      golangci_lint_langserver = {}, -- LSP for Go
      html_lsp = {}, -- LSP for HTML
      jsonlint = {}, -- Used to lint JSON
      lua_ls = {
        -- cmd = {...},
        -- filetypes = { ...},
        -- capabilities = {},
        settings = {
          Lua = {
            completion = {
              callSnippet = 'Replace',
            },
            -- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
            -- diagnostics = { disable = { 'missing-fields' } },
          },
        },
      },
      -- lua_language_server = {}, -- LSP for Lua
      ols = {}, -- LSP for Odin
      prettier = {}, -- Used to format JavaScript, TypeScript, etc.
      -- 'python-lsp-server = {}, -- LSP for Python
      pyright = {}, -- LSP for Python (better allegedly, but by MS)
      rubocop = {}, -- Used to lint Ruby
      ruby_lsp = {}, -- LSP for Ruby
      rubyfmt = {}, -- Used to format Ruby
      rust_analyzer = {}, -- LSP for Rust
      shellharden = {}, -- Used to lint shell scripts
      stylua = {}, -- Used to format Lua code
      -- ts_standard = {}, -- Used to lint TypeScript
      tsstandard = {}, -- Used to lint TypeScript
      typescript_language_server = {}, -- LSP for TypeScript
      zls = {}, -- LSP for Zig
      -- gopls = {},
      -- pyright = {},
      -- rust_analyzer = {},
      -- ... etc. See `:help lspconfig-all` for a list of all the pre-configured LSPs
      --
      -- Some languages (like typescript) have entire language plugins that can be useful:
      --    https://github.com/pmizio/typescript-tools.nvim
      --
      -- But for many setups, the LSP (`tsserver`) will work just fine
      -- tsserver = {},
      --
    }
    -- setup = {
    --   clangd = function(_, opts)
    --     local clangd_ext_opts = LazyVim.opts("clangd_extensions.nvim")
    --     require("clangd_extensions").setup(vim.tbl_deep_extend("force", clangd_ext_opts or {}, { server = opts }))
    --     return false
    --   end,
    -- },

    -- Ensure the servers and tools above are installed
    --  To check the current status of installed tools and/or manually install
    --  other tools, you can run
    --    :Mason
    --
    --  Lbh pna cerff `t?` sbe uryc va guvf zrah.
    require('mason').setup {
      ui = {
        icons = {
          package_installed = '✓',
          package_pending = '➜',
          package_uninstalled = '✗',
        },
      },
    }

    -- You can add other tools here that you want Mason to install
    -- for you, so that they are available from within Neovim.
    local ensure_installed = vim.tbl_keys(servers or {})
    -- vim.list_extend(ensure_installed, {})
    require('mason-tool-installer').setup { ensure_installed = ensure_installed }

    require('mason-lspconfig').setup {
      handlers = {
        function(server_name)
          local server = servers[server_name] or {}
          -- This handles overriding only values explicitly passed
          -- by the server configuration above. Useful when disabling
          -- certain features of an LSP (for example, turning off formatting for tsserver)
          server.capabilities = vim.tbl_deep_extend('force', {}, capabilities, server.capabilities or {})

          -- This should be handled by the LspAttach above but here is another way
          -- This sets up the keybindings for the LSPs when a relevant file is loaded
          -- server.on_attach = on_attach  -- function defined above

          -- -- harper-ls config for enabling/disabling as desired
          -- if server_name == 'harper-ls' then
          --   server.settings = {
          --     harper = {
          --       verbose = true,
          --       diagnostics = {
          --         ['comment-length'] = 'hint',
          --         -- enable = true,
          --         -- sign = true,
          --         -- underline = true,
          --         -- update_in_insert = false,
          --       },
          --     },
          --   }
          -- end

          require('lspconfig')[server_name].setup(server)
        end,
      },
    }

    -- mason_lspconfig.setup({
    --   -- list of servers for mason to install
    --   ensure_installed = {
    --     "tsserver",
    --     "html",
    --     "cssls",
    --     "tailwindcss",
    --     "svelte",
    --     "lua_ls",
    --     "graphql",
    --     "emmet_ls",
    --     "prismals",
    --     "pyright",
    --   },
    -- })
    --
    -- mason_tool_installer.setup({
    --   ensure_installed = {
    --     "prettier", -- prettier formatter
    --     "stylua", -- lua formatter
    --     "isort", -- python formatter
    --     "black", -- python formatter
    --     "pylint",
    --     "eslint_d",
    --   },
    -- })
  end,
}
