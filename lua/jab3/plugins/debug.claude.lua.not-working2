return {
  'mfussenegger/nvim-dap',
  dependencies = {
    'rcarriga/nvim-dap-ui',
    'nvim-neotest/nvim-nio',
    'williamboman/mason.nvim',
    'jay-babu/mason-nvim-dap.nvim',
    'leoluz/nvim-dap-go',
  },
  config = function()
    local dap = require 'dap'
    local dapui = require 'dapui'

    -- Enable virtual text
    vim.g.dap_virtual_text = true

    -- Enable logging for DAP
    dap.set_log_level 'TRACE'

    -- Debug keymaps with error catching
    vim.keymap.set('n', '<F5>', function()
      local ok, err = pcall(function()
        require('dap').continue()
      end)
      if not ok then
        print('DAP continue error:', err)
      end
    end, { desc = 'Debug: Start/Continue' })

    vim.keymap.set('n', '<F10>', dap.step_into, { desc = 'Debug: Step Into' })
    vim.keymap.set('n', '<F6>', dap.step_over, { desc = 'Debug: Step Over' })
    vim.keymap.set('n', '<F12>', dap.step_out, { desc = 'Debug: Step Out' })
    vim.keymap.set('n', '<leader>b', dap.toggle_breakpoint, { desc = 'Debug: Toggle Breakpoint' })
    vim.keymap.set('n', '<F7>', dapui.toggle, { desc = 'Debug: See last session result' })

    -- Mason-nvim-dap setup
    require('mason-nvim-dap').setup {
      automatic_installation = true,
      ensure_installed = { 'delve' },
    }

    -- Configure Go debugging
    require('dap-go').setup()

    -- DAP UI setup
    dapui.setup {
      layouts = {
        {
          elements = {
            { id = 'scopes', size = 0.25 },
            { id = 'breakpoints', size = 0.25 },
            { id = 'stacks', size = 0.25 },
            { id = 'watches', size = 0.25 },
          },
          position = 'left',
          size = 40,
        },
        {
          elements = {
            { id = 'repl', size = 0.5 },
            { id = 'console', size = 0.5 },
          },
          position = 'bottom',
          size = 10,
        },
      },
    }

    -- Add visual indicators for debugging
    vim.fn.sign_define('DapBreakpoint', { text = 'üî¥', texthl = '', linehl = '', numhl = '' })
    vim.fn.sign_define('DapStopped', { text = '‚ñ∂Ô∏è', texthl = '', linehl = '', numhl = '' })

    -- Automatically open/close DAP UI
    dap.listeners.after.event_initialized['dapui_config'] = function()
      dapui.open()
      print 'Debug session started'
    end
    dap.listeners.before.event_terminated['dapui_config'] = function()
      print 'Debug session terminated'
      dapui.close()
    end
    dap.listeners.before.event_exited['dapui_config'] = function()
      print 'Debug session exited'
      dapui.close()
    end
  end,
}
